// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eCommerceAPI.Infrastructure;

namespace eCommerceAPI.Infrastructure.Migrations
{
    [DbContext(typeof(ECommerceDBContext))]
    [Migration("20220823104558_createdatabase")]
    partial class createdatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eCommerceAPI.Domain.Models.Categories", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductsProductId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.HasIndex("ProductsProductId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("eCommerceAPI.Domain.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("eCommerceAPI.Domain.Models.Customers", b =>
                {
                    b.Property<int>("Customerid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Customername")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phonenumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Customerid");

                    b.HasIndex("CountryId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("eCommerceAPI.Domain.Models.DiscountPolicy", b =>
                {
                    b.Property<int>("DiscountpolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiscountpolicyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Percentage")
                        .HasColumnType("real");

                    b.HasKey("DiscountpolicyId");

                    b.ToTable("DiscountPolicy");
                });

            modelBuilder.Entity("eCommerceAPI.Domain.Models.OrderDetails", b =>
                {
                    b.Property<int>("OrderDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("OrdersOrderId")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailsId");

                    b.HasIndex("OrdersOrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("eCommerceAPI.Domain.Models.Orders", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomersCustomerid")
                        .HasColumnType("int");

                    b.Property<int>("DiscountpolicyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TotalAmount")
                        .HasColumnType("real");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomersCustomerid");

                    b.HasIndex("DiscountpolicyId")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("eCommerceAPI.Domain.Models.Products", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderDetailsId")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockAmount")
                        .HasColumnType("int");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("ProductId");

                    b.HasIndex("OrderDetailsId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("eCommerceAPI.Domain.Models.Categories", b =>
                {
                    b.HasOne("eCommerceAPI.Domain.Models.Products", "Products")
                        .WithMany("Categories")
                        .HasForeignKey("ProductsProductId");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("eCommerceAPI.Domain.Models.Customers", b =>
                {
                    b.HasOne("eCommerceAPI.Domain.Models.Country", "Country")
                        .WithOne("Customer")
                        .HasForeignKey("eCommerceAPI.Domain.Models.Customers", "CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("eCommerceAPI.Domain.Models.OrderDetails", b =>
                {
                    b.HasOne("eCommerceAPI.Domain.Models.Orders", "Orders")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrdersOrderId");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("eCommerceAPI.Domain.Models.Orders", b =>
                {
                    b.HasOne("eCommerceAPI.Domain.Models.Customers", "Customers")
                        .WithMany("Orders")
                        .HasForeignKey("CustomersCustomerid");

                    b.HasOne("eCommerceAPI.Domain.Models.DiscountPolicy", "DiscountPolicy")
                        .WithOne("Orders")
                        .HasForeignKey("eCommerceAPI.Domain.Models.Orders", "DiscountpolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customers");

                    b.Navigation("DiscountPolicy");
                });

            modelBuilder.Entity("eCommerceAPI.Domain.Models.Products", b =>
                {
                    b.HasOne("eCommerceAPI.Domain.Models.OrderDetails", "OrderDetails")
                        .WithMany("Products")
                        .HasForeignKey("OrderDetailsId");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("eCommerceAPI.Domain.Models.Country", b =>
                {
                    b.Navigation("Customer");
                });

            modelBuilder.Entity("eCommerceAPI.Domain.Models.Customers", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("eCommerceAPI.Domain.Models.DiscountPolicy", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("eCommerceAPI.Domain.Models.OrderDetails", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("eCommerceAPI.Domain.Models.Orders", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("eCommerceAPI.Domain.Models.Products", b =>
                {
                    b.Navigation("Categories");
                });
#pragma warning restore 612, 618
        }
    }
}
